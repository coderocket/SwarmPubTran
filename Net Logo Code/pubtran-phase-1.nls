; TODO: base the amount of path clearing each ant does inversley to the number of ants 
; TODO: base the certainty factor on a ratio instead of a fixed number and make it a
; controllable parameter in the user interface.
extensions [table read-origins]

globals [
  growth-rate-change
  destinations
  ant-life-span
  first-ant-id
  file-origins-coordinates
  flowMap
  average-ant-lifetime
  ants-died
  num-of-origins
]

patches-own [
  roughness
  growth-rate
  stay-away
  come-here
]

; a passenger has a destination it wishes to get to.

breed [passengers passenger]

passengers-own [
  destination
  on-a-bus
  get-off-station ; when on a bus get off at this station
  trip-time; the number of ticks from the beginning of phase-3 until the passenger gets to their destination 
]

breed [ants ant]

ants-own [
  destination
  age
  begin-ticks
  end-ticks
]

to reset-phase-1
  clear-all
  setup-patches
  set file-origins-coordinates read-origins:read-regions-coordinates nodes-file-path num-of-origins
  set average-ant-lifetime 0
  set ants-died 0
  reset-ticks
end

to setup-phase-1
  ;ask buses [die]
  setup-passengers-from-file ;setup-passengers
  setup-ants
  reset-ticks
end

to setup-passengers-from-file
  set-default-shape passengers "person business"
  set flowMap read-origins:read-flow-mat trips-path num-of-origins;load-flow-map-from-file
  set number-of-passengers 0
  let i 0
  let j 0
  
  repeat length(flowMap) [
    set j 0
    
    repeat length(flowMap) + 1 [ 
      
      if j < length(item i flowMap)[
      let flow item j item i flowMap
      let passengersToAdd flow / 500
      set number-of-passengers number-of-passengers + floor(passengersToAdd)
      
      create-passengers passengersToAdd
      [
        let origin-coordinate item i file-origins-coordinates
        let xO item 0 origin-coordinate 
        let yO -1 * (item 1 origin-coordinate) 
        
        
        
        let dest-coordinate item j file-origins-coordinates
        let xD item 0 dest-coordinate
        let yD -1 * (item 1 dest-coordinate )
          
          if flip-vertical[ ; coords are in [-99, 0], to flip it vertical we need to find to compliment to 100 but in negative, for example: -37 -> -(100 - 37) -> -100 + 37
            set yO min-pycor - yO
            set yD min-pycor - yD
          ]
        setxy xO yO
        set destination patch (xD) (yD)
        
        ask destination [
            set pcolor blue
          ]
         
        set on-a-bus nobody
        set trip-time 0
        ]
      ]
      set j j + 1
    ]
    set i i + 1
  ]
end

to setup-patches
  
  import-pcolors map-path
  
  ask patches [
    set roughness 1 / growth-deceleration
    set growth-rate 0
    set stay-away 0
    set come-here 0
  
    ; fix colors
    ifelse abs(pcolor - green) <= 1 [
      set pcolor road-color
    ]
    [
      set pcolor off-road-color
    ]
  ]
end

to setup-patches-in-maze
    set growth-deceleration 0.001

  ask patches [
    set roughness 1 / growth-deceleration
    set growth-rate 0
    set stay-away 0

    ifelse pcolor > 3
    [ set pcolor off-road-color ]
    [ refresh-color ]
  ]
end

to setup-ants
  
  set ant-life-span 2000

  ask passengers [
    hatch-ants 1 [
      set shape "ant"
      set color red
      setxy pxcor pycor
      set destination [destination] of myself
      set age 0
      set begin-ticks ticks
      
      ask destination [
        set pcolor blue
      ]
    ]
  ]

  set first-ant-id min [who] of ants
end

to go-phase-1
  grow-grass
  move-ants
  diffuse come-here come-here-decay
  ask patches with [ pcolor != off-road-color ] [refresh-color]
;  ask ants [
;    ifelse age >= ant-life-span
;    [die]
;    [set age age + 1] ]
  tick
end

to grow-grass
  ask patches with [ pcolor != off-road-color ] [
    set roughness roughness + growth-rate
    set growth-rate growth-rate * (1 - growth-deceleration)
    set stay-away stay-away * stay-away-decay
  ]
  
  ; but not on destinations

 ; ask ants [
  ;  ask patch-here [ refresh-color ]
  ;]
end

to move-ants
  ask ants [
    
    if who - first-ant-id > ticks * 10
    [stop]
    
    ifelse patch-here = destination
    [
      set end-ticks ticks
      let total-ticks end-ticks - begin-ticks
      let average-life average-ant-lifetime * ants-died
      set ants-died ants-died + 1
      set average-ant-lifetime (average-life + total-ticks) / ants-died
      die
    ]
    [next-ant-patch]
  ]
end

to refresh-color                                       
  let s scale (roughness) (color-sensitivity / (100.0 * growth-deceleration))  (1 / growth-deceleration) 0 100
  set pcolor approximate-hsb 124 s s
end

to-report scale [value start finish beginp endp]
  report beginp + (endp - beginp) * (value - start) / (finish - start)
end


to next-ant-patch
  let best-neighbor max-one-of (neighbors with [ pcolor != off-road-color ]) [rank myself]
  if best-neighbor != nobody and [rank myself] of best-neighbor > [rank myself] of patch-here
  [                           
    set roughness roughness * chipping-factor
    set growth-rate 1 - roughness * growth-deceleration 
    face best-neighbor
    fd 1
    set come-here come-here + come-here-incr

  ]                        
  set stay-away stay-away + stay-away-incr
end

to-report rank [aTurtle]
  report (1 + come-here) / (((distance [destination] of aTurtle) ^ 2) * (1 + stay-away)  + 0.000001)
end

to-report average [numbers]
  report sum numbers / length numbers
end

